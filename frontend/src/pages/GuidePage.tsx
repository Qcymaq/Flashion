import React, { useState } from 'react';
import {
  Box,
  Container,
  Typography,
  Button,
  Grid,
  styled,
  Paper,
  TextField,
  Snackbar,
  Alert,
  Divider,
} from '@mui/material';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { submitConsultation, ConsultationForm } from '../services/consultation';

const HeroSection = styled(Box)({
  background: '#F5E6E0',
  padding: '60px 0',
  position: 'relative',
  marginBottom: '60px',
});

const HeroContent = styled(Box)({
  display: 'flex',
  alignItems: 'center',
  gap: '40px',
});

const HeroImage = styled('img')({
  width: '50%',
  maxHeight: '600px',
  objectFit: 'cover',
  borderRadius: '8px',
});

const TryButton = styled(Button)({
  backgroundColor: '#000',
  color: '#fff',
  padding: '12px 32px',
  borderRadius: '25px',
  marginTop: '24px',
  textTransform: 'uppercase',
  '&:hover': {
    backgroundColor: '#333',
  },
});

const StepCard = styled(Paper)({
  padding: '24px',
  height: '100%',
  borderRadius: '16px',
  boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
});

const StepNumber = styled(Typography)({
  fontSize: '24px',
  fontWeight: 'bold',
  marginBottom: '16px',
  color: '#E57373',
});

const GuidePage = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState<ConsultationForm>({
    name: '',
    email: '',
    phone: '',
    service: '',
    message: ''
  });
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success' as 'success' | 'error'
  });

  const handleTryNow = () => {
    navigate('/studio');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await submitConsultation(formData);
      setSnackbar({
        open: true,
        message: 'G·ª≠i y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm.',
        severity: 'success'
      });
      setFormData({
        name: '',
        email: '',
        phone: '',
        service: '',
        message: ''
      });
    } catch (error: any) {
      setSnackbar({
        open: true,
        message: error.message || 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.',
        severity: 'error'
      });
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCloseSnackbar = () => {
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      {/* Hero Section */}
      <HeroSection>
        <Container maxWidth="lg">
          <HeroContent>
            <Box sx={{ flex: 1 }}>
              <Typography variant="h3" gutterBottom sx={{ fontWeight: 600 }}>
                TH·ª¨ NGAY
              </Typography>
              <Typography variant="h3" gutterBottom sx={{ fontWeight: 600 }}>
                TRANG ƒêI·ªÇM ·∫¢O
              </Typography>
              <Typography variant="body1" sx={{ mt: 2, mb: 3, color: '#666' }}>
                D·ªÖ d√†ng v√† tu·ª≥ bi·∫øn phong c√°ch cho ch√≠nh b·∫°n! Kh√°m ph√° s·ª± kh√°c bi·ªát c·ªßa b·∫£n th√¢n v·ªõi c√°c m·∫´u trang ƒëi·ªÉm m·ªõi c√πng c√¥ng c·ª• th·ª≠ trang ƒëi·ªÉm ·∫£o c·ªßa Flashion.
              </Typography>
              <TryButton onClick={handleTryNow}>
                TH·ª¨ NGAY
              </TryButton>
            </Box>
            <HeroImage
              src="/images/guide1.png"
              alt="Demo trang ƒëi·ªÉm ·∫£o"
            />
          </HeroContent>
        </Container>
      </HeroSection>

      {/* Introduction Section */}
      <Container maxWidth="lg" sx={{ mb: 8 }}>
        <Typography variant="h4" align="center" gutterBottom sx={{ fontWeight: 600 }}>
          KH√ÅM PH√Å DI·ªÜN M·∫†O M·ªöI C·ª¶A B·∫†N!
        </Typography>
        <Typography variant="body1" align="center" sx={{ mb: 8, color: '#666' }}>
          B·∫°n ƒëang t√¨m ki·∫øm phong c√°ch trang ƒëi·ªÉm ho√†n h·∫£o? V·ªõi FLASHION - Th·ª≠ trang ƒëi·ªÉm ·∫£o, vi·ªác th·ª≠ nghi·ªám trang ƒëi·ªÉm ch∆∞a bao gi·ªù d·ªÖ d√†ng ƒë·∫øn th·∫ø! Kh√°m ph√° v√¥ h·∫°n v√† ƒëi·ªÉm m·∫°nh ph√π h·ª£p nh·∫•t v·ªõi g∆∞∆°ng m·∫∑t c·ªßa b·∫°n trong ƒëi·ªÉm th·ª≠!
        </Typography>

        {/* Decorative Separator */}
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 6 }}>
          <Divider sx={{ width: '60%', borderColor: '#E57373', borderWidth: 2 }} />
          <Box sx={{ mx: 2, color: '#E57373', fontSize: '24px' }}>‚ú¶</Box>
          <Divider sx={{ width: '60%', borderColor: '#E57373', borderWidth: 2 }} />
        </Box>

        <Typography variant="h4" align="center" gutterBottom sx={{ fontWeight: 600, mb: 6 }}>
          H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG TH·ª¨ TRANG ƒêI·ªÇM ·∫¢O
        </Typography>

        <Grid container spacing={4}>
          <Grid item xs={12} md={6}>
            <StepCard>
              <StepNumber>B∆∞·ªõc 1: B·∫Øt ƒë·∫ßu th·ª≠ trang ƒëi·ªÉm</StepNumber>
              <Typography>
                Truy c·∫≠p v√†o trang web v√† nh·∫•n v√†o n√∫t "TH·ª¨ NGAY".
              </Typography>
            </StepCard>
          </Grid>
          <Grid item xs={12} md={6}>
            <StepCard>
              <StepNumber>B∆∞·ªõc 2: Ch·ªçn s·∫£n ph·∫©m b·∫°n mu·ªën th·ª≠</StepNumber>
              <Typography>
                Duy·ªát qua danh m·ª•c s·∫£n ph·∫©m v√† ch·ªçn nh·ªØng m√≥n ƒë·ªì b·∫°n mu·ªën th·ª≠. Sau ƒë√≥, di chuy·ªÉn ƒë·∫øn ph·∫ßn b·∫°n mu·ªën th·ª≠ trang ƒëi·ªÉm tr√™n khu√¥n m·∫∑t b·∫±ng n√∫t "TH·ª¨ ƒê·ªí ·∫¢O".
              </Typography>
            </StepCard>
          </Grid>
          <Grid item xs={12} md={6}>
            <StepCard>
              <StepNumber>B∆∞·ªõc 3: So s√°nh tr∆∞·ªõc v√† sau</StepNumber>
              <Typography>
                B·∫°n c√≥ th·ªÉ ch·ªçn "T·∫£i ·∫£nh l√™n" ho·∫∑c d√πng "Camera" ƒë·ªÉ th·ª≠ tr·ª±c ti·∫øp. D√πng thanh tr∆∞·ª£t ƒë·ªÉ xem s·ª± kh√°c bi·ªát gi·ªØa khu√¥n m·∫∑t tr∆∞·ªõc v√† sau khi trang ƒëi·ªÉm. B·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh ƒë·ªô ƒë·∫≠m ƒë·ªÉ t·∫°o n√™n di·ªán m·∫°o ho√†n h·∫£o.
              </Typography>
            </StepCard>
          </Grid>
          <Grid item xs={12} md={6}>
            <StepCard>
              <StepNumber>B∆∞·ªõc 4: So s√°nh m√†u s·∫£n ph·∫©m c√πng l√∫c</StepNumber>
              <Typography>
                Ch·ªçn nhi·ªÅu s·∫£n ph·∫©m c√πng l√∫c ƒë·ªÉ th·ª≠ v√† so s√°nh ph·ªëi h·ª£p ho·∫∑c t·ªïng th·ªÉ. M·ªói l·∫ßn b·∫°n ƒë·ªïi m√†u ph√π h·ª£p nh·∫•t.
              </Typography>
            </StepCard>
          </Grid>
        </Grid>
      </Container>

      {/* Contact & Consultation Section (from HomePage) */}
      <Box
        sx={{
          background: 'url(/images/bghomepage1.png) center center / cover no-repeat',
          py: 8,
          minHeight: 500,
          display: 'flex',
          alignItems: 'center',
        }}
      >
        <Container maxWidth="lg">
          <Grid container spacing={4}>
            {/* Contact Info */}
            <Grid item xs={12} md={6}>
              <Typography sx={{ mb: 2 }}>
                B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i b·∫±ng b·∫•t c·ª©<br />
                k√™nh n√†o m√† b·∫°n c√≥ th·ªÉ trao ƒë·ªïi
              </Typography>
              <Box sx={{ mb: 1 }}>
                <span role="img" aria-label="address">üìç</span> ƒê·ªãa ch·ªâ c·ªßa ch√∫ng t√¥i
              </Box>
              <Box sx={{ mb: 1 }}>
                <span role="img" aria-label="email">‚úâÔ∏è</span> flashion@fpt.vn
              </Box>
              <Box sx={{ mb: 2 }}>
                <span role="img" aria-label="phone">üìû</span> 0123456789
              </Box>
              <Box sx={{ mb: 2 }}>
                <Box sx={{
                  display: 'flex', alignItems: 'center', bgcolor: '#fff', borderRadius: 3, p: 1, mb: 1, width: 300
                }}>
                  <Typography fontWeight={600} sx={{ flex: 1 }}>Nh·∫Øn tin qua<br />Zalo Official</Typography>
                  <Box component="img" src="/images/zalo.png" alt="Zalo" sx={{ width: 32, height: 32, ml: 2 }} />
                </Box>
                <Box sx={{
                  display: 'flex', alignItems: 'center', bgcolor: '#fff', borderRadius: 3, p: 1, width: 300
                }}>
                  <Typography fontWeight={600} sx={{ flex: 1 }}>G·ªçi ngay Hotline<br />0123456789</Typography>
                  <Box component="img" src="/images/hotline.png" alt="Hotline" sx={{ width: 32, height: 32, ml: 2 }} />
                </Box>
              </Box>
            </Grid>
            {/* Consultation Form */}
            <Grid item xs={12} md={6}>
              <Box sx={{
                bgcolor: '#fff', borderRadius: 3, p: 4, boxShadow: 1, maxWidth: 400, mx: 'auto'
              }}>
                <Typography variant="h6" fontWeight={700} align="center" sx={{ mb: 1 }}>
                  Y√™u c·∫ßu t∆∞ v·∫•n ngay
                </Typography>
                <Typography align="center" sx={{ mb: 2, fontSize: 14 }}>
                  Ch√∫ng t√¥i g·ªçi l·∫°i ngay sau 1 - 3 ph√∫t
                </Typography>
                <Box component="form" onSubmit={handleSubmit}>
                  <TextField fullWidth label="H·ªç v√† t√™n c·ªßa b·∫°n" name="name" value={formData.name} onChange={handleChange} size="small" sx={{ mb: 2 }} />
                  <TextField fullWidth label="Email" name="email" value={formData.email} onChange={handleChange} size="small" sx={{ mb: 2 }} />
                  <TextField fullWidth label="S·ªë ƒëi·ªán tho·∫°i" name="phone" value={formData.phone} onChange={handleChange} size="small" sx={{ mb: 2 }} />
                  <TextField fullWidth label="Vui l√≤ng ch·ªçn d·ªãch v·ª• m√† quan t√¢m" name="service" value={formData.service} onChange={handleChange} size="small" sx={{ mb: 2 }} />
                  <TextField fullWidth label="Y√™u c·∫ßu c·ª• th·ªÉ (n·∫øu c√≥)" name="message" value={formData.message} onChange={handleChange} size="small" sx={{ mb: 2 }} />
                  <Button fullWidth variant="contained" sx={{ bgcolor: '#fbeee6', color: '#000', fontWeight: 700 }} type="submit">
                    G·ª≠i ngay cho ch√∫ng t√¥i
                  </Button>
                </Box>
              </Box>
            </Grid>
          </Grid>
        </Container>
      </Box>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </motion.div>
  );
};

export default GuidePage; 